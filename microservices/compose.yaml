services:
  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    ports :
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - storage
      - analysis
    networks:
      - main
  storage:
    build:
      context: ./storage-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    env_file:
      - .env
    depends_on:
      - postgres-storage
    volumes:
      - content_data:/app/content
    networks:
      - main

  postgres-storage:
    image: postgres:17
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME_STORAGE}
      POSTGRES_USER: ${POSTGRES_USER}
    expose:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart:
      always
    networks:
      - main
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${DATABASE_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  analysis-postgres:
    image: postgres:17
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME_ANALYSIS}
      POSTGRES_USER: ${POSTGRES_USER}
    expose:
      - "5432:5432"
    volumes:
      - postgres_data_analysis:/var/lib/postgresql/data
    restart:
      always
    networks:
      - main
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${DATABASE_NAME_ANALYSIS}"]
      interval: 5s
      timeout: 5s
      retries: 5

  analysis:
    build:
      context: ./file-analysis
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    env_file:
      - .env
    depends_on:
      - analysis-postgres
    volumes:
      - content_data_2:/app/images
    networks:
      - main

networks:
  main:
    driver: bridge

volumes:
  postgres_data:
  postgres_data_analysis:
  content_data:
  content_data_2: